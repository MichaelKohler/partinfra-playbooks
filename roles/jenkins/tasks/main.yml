---
- name: Install NFS client
  apt:
    name: "nfs-common"
    state: present
  tags:
    - storage
    - efs
    - jenkins

- name: Ensure EFS volume mountpoint exists
  file:
    path: "{{ jenkins_efs_mountpoint }}"
    state: directory
  tags:
    - storage
    - efs
    - jenkins

- name: Mount EFS target for persistent app storage
  mount:
    name: "{{ jenkins_efs_mountpoint }}"
    src: "{{ ansible_ec2_placement_availability_zone }}.{{ jenkins_filesystem_id }}.efs.{{ ec2_region }}.amazonaws.com:/"
    fstype: nfs4
    state: mounted
  tags:
    - storage
    - efs
    - jenkins

- name: Add docker deb repository keys
  apt_key:
    keyserver: p80.pool.sks-keyservers.net
    id: "58118E89F3A912897C070ADBF76221572C52609D"
  tags:
    - jenkins

- name: Remove (legacy) docker deb repository
  apt_repository:
    repo: "deb http://get.docker.io/ubuntu docker main"
    state: absent
  tags:
    - mesos
    - docker

- name: Add docker deb repository
  apt_repository:
    repo: "deb http://apt.dockerproject.org/repo ubuntu-trusty main"
    state: present
  tags:
    - mesos
    - docker

- name: Update repository cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  tags:
    - jenkins

- name: Install apt dependencies
  apt:
    name: "{{ item }}"
    state: present
  tags:
    - jenkins
  with_items:
    - docker
    - docker-engine
    - python-pip
    - python-dev

- name: install docker-py with pip
  pip:
    name: docker-py

- name: Ensure jenkins volume folder exists
  file:
    path: "/opt/jenkins"
    state: directory
    owner: 1000
  tags:
    - jenkins

- name: start docker
  service:
    name: docker
    enabled: yes
    state: started
  tags:
    - jenkins
    - docker

# when adding the tag to just the tag param it still tries to pull the latest tag.
# Adding the tag to both the name and tag params seems to solve the issue.
- name: pull jenkins image
  docker_image:
    name: partinfra/jenkins:{{ jenkins_release }}
    tag: "{{ jenkins_release }}"
  tags:
    - jenkins
    - startjenkins

- name: Run internal jenkins docker
  docker:
    name: jenkins
    image: partinfra/jenkins:{{ jenkins_release }}
    state: reloaded
    pull: always
    ports:
      - "8081:8080"
      - "50000:50000"
    volumes:
      - "/opt/jenkins:/var/jenkins_home"
    restart_policy: always
  tags:
    - jenkins
    - startjenkins
  when:
    - ec2_tag_Name == "admin"
    - ec2_tag_app == "jenkins"

- name: Run public jenkins docker
  docker:
    name: jenkins
    image: partinfra/jenkins:{{ jenkins_release }}
    state: reloaded
    pull: always
    net: "host"
    volumes:
      - "/opt/jenkins:/var/jenkins_home"
    restart_policy: always
  tags:
    - jenkins
    - startjenkins
  when:
    - ec2_tag_Name == "jenkins-public"
    - ec2_tag_app == "jenkins"

- name: Setup internal consul service and check definitions
  template:
    src: consul.json.j2
    dest: /etc/consul.d/jenkins.json
    owner: root
    group: root
    mode: 0644
  notify:
    - restart consul
  tags:
    - jenkins
    - consul
  when:
    - ec2_tag_Name == "admin"
    - ec2_tag_app == "jenkins"

- name: Setup public consul service and check definitions
  template:
    src: consul_public.json.j2
    dest: /etc/consul.d/jenkins.json
    owner: root
    group: root
    mode: 0644
  notify:
    - restart consul
  tags:
    - jenkins
    - consul
  when:
    - ec2_tag_Name == "jenkins-public"
    - ec2_tag_app == "jenkins"
